@page "/TodoList"
@using TodoAdvanced.Models
@using TodoAdvanced.Data
@inject ITodosService TodosService

<h3>TodoList</h3>
<p>
    Filter by User Id: <input type="number" @oninput="@((arg) => FilterByUserId(arg))" style="width: 50px"/>
</p>
<p>
    Filter by completed status:
    <select class="form-control selectpicker" @onchange="@((arg) => FilterByCompletedStatus(arg))" style="width: 100px">
        <option>Both</option>
        <option>False</option>
        <option>True</option>
    </select>
</p>

@if (todosToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>User ID</th>
            <th>Todo ID</th>
            <th>Title ID</th>
            <th>Completed?</th>
            <th>Remove</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in todosToShow)
        {
            <tr>
                <td>@item.UserId</td>
                <td>@item.TodoId</td>
                <td>@item.Title</td>
                <td>
                    <input type="checkbox" checked=@item.IsCompleted @onchange="@((arg) => CompletedChange(arg,item))"/>
                </td>
                <td>
                    <button @onclick="@(() => RemoveTodo(item.TodoId))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
    }

@code {
    private IList<Todo> todosToShow;
    private IList<Todo> allTodos;

    private int? filterById;
    private bool? filterByIsCompleted;

    protected override async Task OnInitializedAsync()
    {
        allTodos = TodosService.GetTodos();
        todosToShow = allTodos;
    }

    private void RemoveTodo(int todoId)
    {
        Todo todoToRemove = allTodos.First(t => t.TodoId == todoId);
        TodosService.RemoveTodo(todoId);
        allTodos.Remove(todoToRemove);
    }

    private void CompletedChange(ChangeEventArgs evt, Todo todo)
    {
        todo.IsCompleted = (bool) evt.Value;
        TodosService.Update(todo);
    }

    private void FilterByUserId(ChangeEventArgs changeEventArgs)
    {
        filterById = null;
        try
        {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e){}
        ExecuteFilter();
    }
    
    private void FilterByCompletedStatus(ChangeEventArgs changeEventArgs)
    {
        filterByIsCompleted = null;
        try
        {
            filterByIsCompleted = bool.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e){}
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        todosToShow = allTodos.Where(t =>
            (filterById != null && t.UserId == filterById || filterById == null) &&
            (filterByIsCompleted != null && t.IsCompleted == filterByIsCompleted || filterByIsCompleted == null)
            ).ToList();
    }

}